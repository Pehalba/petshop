/*
 * Papa Parse - JavaScript CSV Parser
 * v5.4.1
 * Simplified version for Pet Shop System
 */
(function (global) {
  "use strict";

  var Papa = {};

  Papa.parse = function (input, config) {
    config = config || {};

    if (typeof input !== "string") {
      return { data: [], errors: ["Input must be a string"] };
    }

    var lines = input.split(/\r\n|\n|\r/);
    var data = [];
    var headers = [];
    var errors = [];

    if (lines.length === 0) {
      return { data: [], errors: ["No data found"] };
    }

    // Parse header
    if (config.header) {
      headers = parseLine(lines[0]);
      lines = lines.slice(1);
    }

    // Parse data lines
    for (var i = 0; i < lines.length; i++) {
      var line = lines[i].trim();
      if (line === "" && config.skipEmptyLines) {
        continue;
      }

      if (line !== "") {
        var fields = parseLine(line);

        if (config.header) {
          var obj = {};
          for (var j = 0; j < headers.length; j++) {
            var header = headers[j];
            if (config.transformHeader) {
              header = config.transformHeader(header);
            }
            obj[header] = fields[j] || "";
          }
          data.push(obj);
        } else {
          data.push(fields);
        }
      }
    }

    return {
      data: data,
      errors: errors,
      meta: {
        delimiter: ",",
        linebreak: "\n",
        aborted: false,
        truncated: false,
        cursor: input.length,
      },
    };
  };

  function parseLine(line) {
    var fields = [];
    var field = "";
    var inQuotes = false;

    for (var i = 0; i < line.length; i++) {
      var char = line[i];
      var nextChar = line[i + 1];

      if (char === '"') {
        if (inQuotes && nextChar === '"') {
          field += '"';
          i++; // Skip next quote
        } else {
          inQuotes = !inQuotes;
        }
      } else if (char === "," && !inQuotes) {
        fields.push(field.trim());
        field = "";
      } else {
        field += char;
      }
    }

    fields.push(field.trim());
    return fields;
  }

  Papa.unparse = function (data) {
    if (!Array.isArray(data) || data.length === 0) {
      return "";
    }

    var csv = "";
    var isObject = typeof data[0] === "object" && !Array.isArray(data[0]);

    if (isObject) {
      // Header row
      var headers = Object.keys(data[0]);
      csv += headers.join(",") + "\n";

      // Data rows
      for (var i = 0; i < data.length; i++) {
        var row = [];
        for (var j = 0; j < headers.length; j++) {
          var value = data[i][headers[j]] || "";
          if (
            typeof value === "string" &&
            (value.includes(",") || value.includes('"'))
          ) {
            value = '"' + value.replace(/"/g, '""') + '"';
          }
          row.push(value);
        }
        csv += row.join(",") + "\n";
      }
    } else {
      // Array of arrays
      for (var i = 0; i < data.length; i++) {
        var row = [];
        for (var j = 0; j < data[i].length; j++) {
          var value = data[i][j] || "";
          if (
            typeof value === "string" &&
            (value.includes(",") || value.includes('"'))
          ) {
            value = '"' + value.replace(/"/g, '""') + '"';
          }
          row.push(value);
        }
        csv += row.join(",") + "\n";
      }
    }

    return csv;
  };

  // Export
  if (typeof module !== "undefined" && module.exports) {
    module.exports = Papa;
  } else if (typeof define === "function" && define.amd) {
    define(function () {
      return Papa;
    });
  } else {
    global.Papa = Papa;
  }
})(typeof window !== "undefined" ? window : this);
